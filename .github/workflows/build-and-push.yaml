name: Build and push Docker image to ECR

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: {}

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  IMAGE_TAG: ${{ github.sha }}
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Mask registry in logs
        run: echo "::add-mask::${{ secrets.ECR_REGISTRY }}"

      - name: Debug refs
        run: |
            echo "GITHUB_REF=$GITHUB_REF"
            echo "GITHUB_REF_NAME=$GITHUB_REF_NAME"

      - name: Configure AWS credentials (OIDC)https://www.linkedin.com/feed/update/urn:li:activity:7376539829569929216/?commentUrn=urn%3Ali%3Acomment%3A(activity%3A7376539829569929216%2C7376577795692392448)&dashCommentUrn=urn%3Ali%3Afsd_comment%3A(7376577795692392448%2Curn%3Ali%3Aactivity%3A7376539829569929216)&dashReplyUrn=urn%3Ali%3Afsd_comment%3A(7376597675477090304%2Curn%3Ali%3Aactivity%3A7376539829569929216)&replyUrn=urn%3Ali%3Acomment%3A(activity%3A7376539829569929216%2C7376597675477090304)#
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2


      # Build and push image to ECR before any SSM/EC2 steps
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - name: Find Manager instance ID
        id: find-manager
        shell: bash
        run: |
          set -euo pipefail
          MID=$(aws ec2 describe-instances \
            --region "${{ secrets.AWS_REGION }}" \
            --filters "Name=tag:aws:cloudformation:logical-id,Values=Manager" "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].InstanceId | [0]" \
            --output text)
          echo "Resolved manager InstanceId: ${MID}"
          [[ -z "${MID}" || "${MID}" == "None" ]] && { echo "ERROR: No running Manager instance"; exit 1; }
          echo "instance_id=${MID}" >> "$GITHUB_OUTPUT"

      # - name: Resolve Manager Name tag
      #   id: find-manager-name
      #   shell: bash
      #   run: |
      #     set -euo pipefail
      #     NAME=$(aws ec2 describe-instances \
      #       --region "${{ secrets.AWS_REGION }}" \
      #       --instance-ids "${{ steps.find-manager.outputs.instance_id }}" \
      #       --query "Reservations[].Instances[].Tags[?Key=='Name'].Value | [0]" \
      #       --output text)
      #     echo "Manager Name tag: ${NAME}"
      #     [[ -z "${NAME}" || "${NAME}" == "None" ]] && { echo "ERROR: Manager Name tag missing"; exit 1; }
      #     echo "manager_name=${NAME}" >> "$GITHUB_OUTPUT"

      - name: Resolve manager SSM managed-instance id
        id: find-ssm-mi
        run: |
          set -euo pipefail
          MI=$(aws ssm get-parameter \
            --region "${{ secrets.AWS_REGION }}" \
            --name /swarm/manager/mi \
            --query 'Parameter.Value' --output text)
          echo "mi=${MI}" >> "$GITHUB_OUTPUT"

      - name: Update Swarm service to new image via SSM
        run: |
          FULL_IMAGE="${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"
          aws ssm send-command \
            --region "${{ secrets.AWS_REGION }}" \
            --instance-ids "${{ steps.find-ssm-mi.outputs.mi }}" \
            --document-name "AWS-RunShellScript" \
            --comment "CI: set image tag to new build; Swarm will pull and roll" \
            --parameters "commands=[\"docker service update --image ${FULL_IMAGE} --with-registry-auth --update-order start-first --update-parallelism 1 myappname_web\"]"

      - name: Diagnose Swarm on manager (SSM)
        run: |
          aws ssm send-command \
            --region "${{ secrets.AWS_REGION }}" \
            --instance-ids "${{ steps.find-ssm-mi.outputs.mi }}" \
            --document-name "AWS-RunShellScript" \
            --comment "Diag: list services, tasks, and listeners" \
            --parameters "commands=[
              \"set -euxo pipefail\",
              \"docker node ls || true\",
              \"docker service ls || true\",
              \"docker stack services myappname || true\",
              \"docker service ps myappname_web || true\",
              \"ss -tulpen | grep -E ':80|:8080' || true\",
              \"tail -n 120 /var/log/cloud-init-output.log || true\"
            ]"