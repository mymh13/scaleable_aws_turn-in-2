name: Build and push Docker image to ECR

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: {}

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  IMAGE_TAG: ${{ github.sha }}
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Mask registry in logs
        run: echo "::add-mask::${{ secrets.ECR_REGISTRY }}"

      - name: Debug refs
        run: |
            echo "GITHUB_REF=$GITHUB_REF"
            echo "GITHUB_REF_NAME=$GITHUB_REF_NAME"

      - name: Configure AWS credentials (OIDC)https://www.linkedin.com/feed/update/urn:li:activity:7376539829569929216/?commentUrn=urn%3Ali%3Acomment%3A(activity%3A7376539829569929216%2C7376577795692392448)&dashCommentUrn=urn%3Ali%3Afsd_comment%3A(7376577795692392448%2Curn%3Ali%3Aactivity%3A7376539829569929216)&dashReplyUrn=urn%3Ali%3Afsd_comment%3A(7376597675477090304%2Curn%3Ali%3Aactivity%3A7376539829569929216)&replyUrn=urn%3Ali%3Acomment%3A(activity%3A7376539829569929216%2C7376597675477090304)#
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - name: Find Manager instance ID
        id: find-manager
        run: |
            MID=$(aws ec2 describe-instances \
                --region "${{ secrets.AWS_REGION }}" \
                --filters "Name=tag:Name,Values=${{ vars.STACK_NAME_PREFIX }}-manager" "Name=instance-state-name,Values=running" \
                --query "Reservations[0].Instances[0].InstanceId" --output text)
            echo "instance_id=$MID" >> $GITHUB_OUTPUT

      - name: Update Swarm service to new image via SSM
        run: |
          FULL_IMAGE="${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"
          aws ssm send-command \
            --region "${{ secrets.AWS_REGION }}" \
            --targets "Key=tag:Name,Values=${{ vars.STACK_NAME_PREFIX }}-manager" \
            --document-name "AWS-RunShellScript" \
            --comment "CI: set image tag to new build; Swarm will pull and roll" \
            --parameters "commands=[\"docker service update --image ${FULL_IMAGE} --with-registry-auth --update-order start-first --update-parallelism 1 myappname_web\"]"