name: Build and deploy to Docker Swarm

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: {}

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  IMAGE_TAG: ${{ github.sha }}
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push .NET app Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - name: Find Manager instance ID
        id: find-manager
        run: |
          MID=$(aws ec2 describe-instances \
            --region "${{ env.AWS_REGION }}" \
            --filters "Name=tag:aws:cloudformation:logical-id,Values=Manager" "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].InstanceId | [0]" \
            --output text)
          echo "instance_id=${MID}" >> "$GITHUB_OUTPUT"

      - name: Wait for SSM agent on manager
        run: |
          for i in {1..30}; do
            SSM_STATE=$(aws ssm describe-instance-information \
              --region "${{ env.AWS_REGION }}" \
              --filters "Key=InstanceIds,Values=${{ steps.find-manager.outputs.instance_id }}" \
              --query "InstanceInformationList[0].PingStatus" --output text)
            if [ "$SSM_STATE" = "Online" ]; then exit 0; fi
            sleep 10
          done
          echo "ERROR: SSM agent not online on manager" && exit 1

      - name: Remove old Swarm app service (if exists)
        run: |
          aws ssm send-command \
            --region "${{ env.AWS_REGION }}" \
            --instance-ids "${{ steps.find-manager.outputs.instance_id }}" \
            --document-name "AWS-RunShellScript" \
            --comment "CI: Remove old Swarm app service" \
            --parameters "commands=[\"docker service rm myappname_web || true\"]"

      - name: Create Swarm app service
        run: |
          FULL_IMAGE="${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"
          aws ssm send-command \
            --region "${{ env.AWS_REGION }}" \
            --instance-ids "${{ steps.find-manager.outputs.instance_id }}" \
            --document-name "AWS-RunShellScript" \
            --comment "CI: Remove old image and create Swarm app service" \
            --parameters "commands=[\"docker image rm ${FULL_IMAGE} || true && aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }} && docker service create --name myappname_web --replicas 1 --publish 80:80 --with-registry-auth ${FULL_IMAGE}\"]"


      - name: Remove old Swarm visualizer service (if exists)
        run: |
          aws ssm send-command \
            --region "${{ env.AWS_REGION }}" \
            --instance-ids "${{ steps.find-manager.outputs.instance_id }}" \
            --document-name "AWS-RunShellScript" \
            --comment "CI: Remove old Swarm visualizer service" \
            --parameters "commands=[\"docker service rm viz || true\"]"

      - name: Create Swarm visualizer service
        run: |
          aws ssm send-command \
            --region "${{ env.AWS_REGION }}" \
            --instance-ids "${{ steps.find-manager.outputs.instance_id }}" \
            --document-name "AWS-RunShellScript" \
            --comment "CI: Create Swarm visualizer service" \
            --parameters "commands=[\"docker service create --name viz --publish=8080:8080/tcp --constraint=node.role==manager --mount=type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock dockersamples/visualizer\"]"