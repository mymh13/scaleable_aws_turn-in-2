AWSTemplateFormatVersion: '2010-09-09'
Description: EC2 instances for Swarm (1 manager, workers) with Docker installed

Parameters:
  StackNamePrefix:
    Type: String
  PublicSubnetId:
    Type: AWS::EC2::Subnet::Id
  SecurityGroupId:
    Type: String
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
  InstanceType:
    Type: String
  AmiId:
    Type: AWS::EC2::Image::Id
  InstanceProfileName:
    Type: String
  TemplateBucket:
    Type: String
  TemplatePrefix:
    Type: String
  RepositoryName: { Type: String, Default: swarm-dotnet-app }
  ImageTag:       { Type: String, Default: dev }
  WaitSeconds:    { Type: Number, Default: 300 }     # 5 minutes max
  PollInterval:   { Type: Number, Default: 5 }       # seconds

Mappings: {}

Resources:
  Manager:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmiId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      SubnetId: !Ref PublicSubnetId
      SecurityGroupIds: [ !Ref SecurityGroupId ]
      IamInstanceProfile: !Ref InstanceProfileName
      MetadataOptions:
        HttpEndpoint: enabled
        HttpTokens: required   # IMDSv2 required
      Tags:
        - Key: Name
          Value: !Sub '${StackNamePrefix}-manager'
      UserData:
        "Fn::Base64": !Sub |
          #!/bin/bash
          set -euxo pipefail
          dnf install -y docker
          systemctl enable --now docker
          usermod -aG docker ec2-user
          docker swarm init
          # Publish manager's private IP and worker join token to SSM Parameter Store using IMDSv2
          TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
          MANAGER_IP=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" -s http://169.254.169.254/latest/meta-data/local-ipv4)
          aws ssm put-parameter --name /swarm/manager-ip --type String --overwrite --value "$MANAGER_IP" --region ${AWS::Region}
          JOIN_TOKEN=$(docker swarm join-token worker -q)
          aws ssm put-parameter --name /swarm/worker-token --type String --overwrite --value "$JOIN_TOKEN" --region ${AWS::Region}

  Worker:
    Type: AWS::EC2::Instance
    DependsOn: Manager
    Properties:
      ImageId: !Ref AmiId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      SubnetId: !Ref PublicSubnetId
      SecurityGroupIds: [ !Ref SecurityGroupId ]
      IamInstanceProfile: !Ref InstanceProfileName
      MetadataOptions:
        HttpEndpoint: enabled
        HttpTokens: required   # IMDSv2 required
      Tags:
        - Key: Name
          Value: !Sub '${StackNamePrefix}-worker'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          dnf update -y
          dnf install -y docker
          systemctl enable --now docker
          usermod -aG docker ec2-user
          # echo "export AWS_REGION=${AWS::Region}; export AWS_DEFAULT_REGION=${AWS::Region}" | tee -a /etc/profile.d/awsregion.sh

          # Wait for manager IP and join token to be available in SSM
          for i in {1..30}; do
            MANAGER_IP=$(aws ssm get-parameter --name /swarm/manager-ip --region ${AWS::Region} --query 'Parameter.Value' --output text 2>/dev/null)
            JOIN_TOKEN=$(aws ssm get-parameter --name /swarm/worker-token --region ${AWS::Region} --query 'Parameter.Value' --output text 2>/dev/null)
            if [[ -n "$MANAGER_IP" && -n "$JOIN_TOKEN" ]]; then
              break
            fi
            sleep 10
          done

          # Use IMDSv2 to get this worker's private IP (optional, for logging/debugging)
          TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
          WORKER_IP=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" -s http://169.254.169.254/latest/meta-data/local-ipv4)
          echo "Worker private IP: $WORKER_IP"

          # Join the swarm
          if [[ -n "$MANAGER_IP" && -n "$JOIN_TOKEN" ]]; then
            docker swarm join --token "$JOIN_TOKEN" "$MANAGER_IP":2377
          else
            echo "ERROR: Manager IP or join token not found after waiting."
            exit 1
          fi

Outputs:
  ManagerPublicIp:
    Value: !GetAtt Manager.PublicIp
  WorkerPublicIp:
    Value: !GetAtt Worker.PublicIp