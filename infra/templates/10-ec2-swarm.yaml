AWSTemplateFormatVersion: '2010-09-09'
Description: EC2 instances for Swarm (1 manager, 2 workers) with Docker installed

Parameters:
  StackNamePrefix:
    Type: String
  PublicSubnetId:
    Type: AWS::EC2::Subnet::Id
  SecurityGroupId:
    Type: String
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
  InstanceType:
    Type: String
  AmiId:
    Type: AWS::EC2::Image::Id
  InstanceProfileName:
    Type: String
  TemplateBucket:
    Type: String
  TemplatePrefix:
    Type: String

Mappings: {}

Resources:
  Manager:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmiId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      SubnetId: !Ref PublicSubnetId
      SecurityGroupIds: [ !Ref SecurityGroupId ]
      IamInstanceProfile: !Ref InstanceProfileName
      MetadataOptions:
        HttpEndpoint: enabled
        HttpTokens: required   # IMDSv2 required
      Tags:
        - Key: Name
          Value: !Sub '${StackNamePrefix}-manager'
      UserData:
        Fn::Base64: !Sub |
          #cloud-config
          runcmd:
            - dnf -y update
            - dnf -y install docker awscli
            - systemctl enable --now docker
            - usermod -aG docker ec2-user
            - 'echo "export AWS_REGION=${AWS::Region}; export AWS_DEFAULT_REGION=${AWS::Region}" | tee -a /etc/profile.d/awsregion.sh'
            - !Sub |
              bash -lc '
                # Wait for Docker to be ready
                for i in {1..10}; do docker info >/dev/null 2>&1 && break || sleep 2; done

                # IMDSv2 token + private IP
                TOKEN=$(curl -sX PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
                MAN_IP=$(curl -s -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/local-ipv4)

                # Init the Swarm
                docker swarm init --advertise-addr "$MAN_IP"

                # Publish join info
                TOK=$(docker swarm join-token -q worker)
                aws ssm put-parameter --name /swarm/manager-ip  --type String --overwrite --value "$MAN_IP" --region ${AWS::Region}
                aws ssm put-parameter --name /swarm/worker-token --type String --overwrite --value "$TOK"     --region ${AWS::Region}

                # Wait for workers to join (expecting 2; adjust if your size changes)
                until [ "$(docker node ls --format "{{.ManagerStatus}} {{.Status}} {{.Availability}}" \
                            | awk '$1=="" && $2=="Ready" && $3=="Active"{c++} END{print c+0}')" -ge 2 ]; do
                  sleep 5
                done

                # Pull generic compose
                aws s3 cp s3://${TemplateBucket}/${TemplatePrefix}artifacts/docker-stack.yml /tmp/docker-stack.yml --region ${AWS::Region}

                # Build ECR image URI from pseudo-params and substitute placeholder
                IMAGE="${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/swarm-dotnet-app:dev"
                sed -i "s|__ECR_IMAGE__|${IMAGE}|g" /tmp/docker-stack.yml

                # Login Docker to ECR (authorized via instance role)
                aws ecr get-login-password --region ${AWS::Region} \
                | docker login --username AWS --password-stdin "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com"

                # First deploy (with registry creds passed to the swarm)
                docker stack deploy -c /tmp/docker-stack.yml --with-registry-auth myappname

                # Optional: small buffer then clean recreate to encourage even placement
                sleep 10
                docker service rm myappname_web || true
                docker stack deploy -c /tmp/docker-stack.yml --with-registry-auth myappname
              '

  Worker1:
    Type: AWS::EC2::Instance
    DependsOn: Manager
    Properties:
      ImageId: !Ref AmiId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      SubnetId: !Ref PublicSubnetId
      SecurityGroupIds: [ !Ref SecurityGroupId ]
      IamInstanceProfile: !Ref InstanceProfileName
      MetadataOptions:
        HttpEndpoint: enabled
        HttpTokens: required   # IMDSv2 required
      Tags:
        - Key: Name
          Value: !Sub '${StackNamePrefix}-worker-1'
      UserData:
        Fn::Base64: !Sub |
          #cloud-config
          runcmd:
            - dnf -y update
            - dnf -y install docker awscli
            - systemctl enable --now docker
            - usermod -aG docker ec2-user
            - 'echo "export AWS_REGION=${AWS::Region}; export AWS_DEFAULT_REGION=${AWS::Region}" | tee -a /etc/profile.d/awsregion.sh'
            - |
              bash -lc '
                MIP=$(aws ssm get-parameter --name /swarm/manager-ip  --query Parameter.Value --output text --region ${AWS::Region})
                TOK=$(aws ssm get-parameter --name /swarm/worker-token --query Parameter.Value --output text --region ${AWS::Region})
                # Wait until worker-token and manager-ip values exist
                for i in {1..60}; do
                  MIP=$(aws ssm get-parameter --name /swarm/manager-ip  --query Parameter.Value --output text --region ${AWS::Region} 2>/dev/null) || true
                  TOK=$(aws ssm get-parameter --name /swarm/worker-token --query Parameter.Value --output text --region ${AWS::Region} 2>/dev/null) || true
                  if [ -n "$MIP" ] && [ -n "$TOK" ]; then break; fi
                  sleep 2
                done
                docker swarm join --token "$TOK" "$MIP:2377"
              '

  Worker2:
    Type: AWS::EC2::Instance
    DependsOn: Manager
    Properties:
      ImageId: !Ref AmiId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      SubnetId: !Ref PublicSubnetId
      SecurityGroupIds: [ !Ref SecurityGroupId ]
      IamInstanceProfile: !Ref InstanceProfileName
      MetadataOptions:
        HttpEndpoint: enabled
        HttpTokens: required   # IMDSv2 required
      Tags:
        - Key: Name
          Value: !Sub '${StackNamePrefix}-worker-2'
      UserData:
        Fn::Base64: !Sub |
          #cloud-config
          runcmd:
            - dnf -y update
            - dnf -y install docker awscli
            - systemctl enable --now docker
            - usermod -aG docker ec2-user
            - 'echo "export AWS_REGION=${AWS::Region}; export AWS_DEFAULT_REGION=${AWS::Region}" | tee -a /etc/profile.d/awsregion.sh'
            - |
              bash -lc '
                MIP=$(aws ssm get-parameter --name /swarm/manager-ip  --query Parameter.Value --output text --region ${AWS::Region})
                TOK=$(aws ssm get-parameter --name /swarm/worker-token --query Parameter.Value --output text --region ${AWS::Region})
                # Wait until worker-token and manager-ip values exist
                for i in {1..60}; do
                  MIP=$(aws ssm get-parameter --name /swarm/manager-ip  --query Parameter.Value --output text --region ${AWS::Region} 2>/dev/null) || true
                  TOK=$(aws ssm get-parameter --name /swarm/worker-token --query Parameter.Value --output text --region ${AWS::Region} 2>/dev/null) || true
                  if [ -n "$MIP" ] && [ -n "$TOK" ]; then break; fi
                  sleep 2
                done
                docker swarm join --token "$TOK" "$MIP:2377"
              '

Outputs:
  ManagerPublicIp:
    Value: !GetAtt Manager.PublicIp
  Worker1PublicIp:
    Value: !GetAtt Worker1.PublicIp
  Worker2PublicIp:
    Value: !GetAtt Worker2.PublicIp