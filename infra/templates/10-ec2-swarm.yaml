AWSTemplateFormatVersion: '2010-09-09'
Description: EC2 instances for Swarm (1 manager, 2 workers) with Docker installed

Parameters:
  StackNamePrefix:
    Type: String
  PublicSubnetId:
    Type: AWS::EC2::Subnet::Id
  SecurityGroupId:
    Type: String
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
  InstanceType:
    Type: String
  AmiId:
    Type: AWS::EC2::Image::Id
  InstanceProfileName:
    Type: String
  TemplateBucket:
    Type: String
  TemplatePrefix:
    Type: String
  RepositoryName: { Type: String, Default: swarm-dotnet-app }
  ImageTag:       { Type: String, Default: dev }
  WaitSeconds:    { Type: Number, Default: 300 }     # 5 minutes max
  PollInterval:   { Type: Number, Default: 5 }       # seconds

Mappings: {}

Resources:
  Manager:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmiId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      SubnetId: !Ref PublicSubnetId
      SecurityGroupIds: [ !Ref SecurityGroupId ]
      IamInstanceProfile: !Ref InstanceProfileName
      MetadataOptions:
        HttpEndpoint: enabled
        HttpTokens: required   # IMDSv2 required
      Tags:
        - Key: Name
          Value: !Sub '${StackNamePrefix}-manager'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          set -euxo pipefail
          dnf update -y
          dnf install -y awscli
          dnf install -y docker
          systemctl enable --now docker
          usermod -aG docker ec2-user
          echo "export AWS_REGION=${AWS::Region}; export AWS_DEFAULT_REGION=${AWS::Region}" | tee -a /etc/profile.d/awsregion.sh

          # Wait for Docker to be ready
          for i in {1..10}; do docker info >/dev/null 2>&1 && break || sleep 2; done

          # Discover private IP (IMDSv2)
          TOKEN=$(curl -sX PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
          MAN_IP=$(curl -s -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/local-ipv4)

          # Init swarm + publish join info
          if [ "$(docker info --format "{{ .Swarm.LocalNodeState }}")" != "active" ]; then
            docker swarm init --advertise-addr "$MAN_IP"
          fi
          TOK=$(docker swarm join-token -q worker)
          aws ssm put-parameter --name /swarm/manager-ip  --type String --overwrite --value "$MAN_IP" --region ${AWS::Region}
          aws ssm put-parameter --name /swarm/worker-token --type String --overwrite --value "$TOK"     --region ${AWS::Region}

          # record this nodes SSM managed-instance id to Parameter Store
          if [ -f /var/lib/amazon/ssm/instanceid ]; then
            MI_ID="$(cat /var/lib/amazon/ssm/instanceid)"
            aws ssm put-parameter \
              --name /swarm/manager/mi \
              --type String \
              --overwrite \
              --value "$MI_ID" \
              --region ${AWS::Region}
          fi

          # Label the manager (for future spreading)
          docker node update --label-add role=manager "$(hostname)" || true
          AZ=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone || true)
          [ -n "$AZ" ] && docker node update --label-add az="$AZ" "$(hostname)" || true

          # Fetch compose from S3 (correct path!) and verify it exists
          aws s3 cp s3://${TemplateBucket}/${TemplatePrefix}artifacts/docker-stack.yml /tmp/docker-stack.yml --region ${AWS::Region}
          test -s /tmp/docker-stack.yml || { echo "FATAL: /tmp/docker-stack.yml missing/empty"; exit 1; }

          # Substitute image placeholder
          IMAGE="${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/swarm-dotnet-app:dev"
          sed -i "s|__ECR_IMAGE__|$IMAGE|g" /tmp/docker-stack.yml

          # ECR login (instance role)
          aws ecr get-login-password --region ${AWS::Region} \
            | docker login --username AWS --password-stdin "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com"

          # Wait until the tag exists in ECR (avoids racing the first push)
          for i in {1..60}; do
            if aws ecr describe-images \
                --repository-name swarm-dotnet-app \
                --image-ids imageTag=dev \
                --region ${AWS::Region} >/dev/null 2>&1; then
              echo "ECR image tag found"; break
            fi
            echo "Waiting for ECR image tag dev... ($i)"
            sleep 5
          done

          # Deploy (and verify it actually created the service)
          docker stack deploy -c /tmp/docker-stack.yml --with-registry-auth myappname

          # Force update the web service to ensure latest image is pulled
          docker service update --image "$IMAGE" --force myappname_web || true

          # Sanity loop: ensure services exist (bail if not)
          for i in {1..12}; do
            if docker service ls | grep -q "myappname_web"; then
              docker service ls
              break
            fi
            echo "Waiting for services to appear... ($i)"
            sleep 5
          done


  Worker:
    Type: AWS::EC2::Instance
    DependsOn: Manager
    Properties:
      ImageId: !Ref AmiId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      SubnetId: !Ref PublicSubnetId
      SecurityGroupIds: [ !Ref SecurityGroupId ]
      IamInstanceProfile: !Ref InstanceProfileName
      MetadataOptions:
        HttpEndpoint: enabled
        HttpTokens: required   # IMDSv2 required
      Tags:
        - Key: Name
          Value: !Sub '${StackNamePrefix}-worker'
      UserData:
        Fn::Base64: !Sub |
          #cloud-config
          runcmd:
            - dnf -y update
            - dnf -y install docker awscli
            - systemctl enable --now docker
            - usermod -aG docker ec2-user || true
            - 'echo "export AWS_REGION=${AWS::Region}; export AWS_DEFAULT_REGION=${AWS::Region}" | tee -a /etc/profile.d/awsregion.sh'
            - |
              bash -lc '
                # Wait for manager IP and worker token in SSM
                for i in {1..60}; do
                  MIP=$(aws ssm get-parameter --name /swarm/manager-ip --query Parameter.Value --output text --region ${AWS::Region} 2>/dev/null) || true
                  TOK=$(aws ssm get-parameter --name /swarm/worker-token --query Parameter.Value --output text --region ${AWS::Region} 2>/dev/null) || true
                  if [ -n "$MIP" ] && [ -n "$TOK" ]; then break; fi
                  sleep 2
                done
                docker swarm join --token "$TOK" "$MIP:2377"
              '

Outputs:
  ManagerPublicIp:
    Value: !GetAtt Manager.PublicIp
  WorkerPublicIp:
    Value: !GetAtt Worker.PublicIp