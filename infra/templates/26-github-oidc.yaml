AWSTemplateFormatVersion: '2010-09-09'
Description: OIDC role for GitHub Actions to push images to ECR

Parameters:
  StackNamePrefix: { Type: String }
  RepositoryName:  { Type: String, Default: swarm-dotnet-app } # ECR repo
  GitHubOrg:       { Type: String, Default: mymh13 }
  GitHubRepo:      { Type: String, Default: swarm-dotnet-test }
  GitHubRef:       { Type: String, Default: refs/heads/main }
    # allow main branch (adjust if needed)
  OidcThumbprint:  { Type: String,  Default: 6938fd4d98bab03faadb97b34396831e3780aea1 }
    # value can be modified if you want, instead of hardcoding it in the Resources section

Resources:
  GitHubOidcProvider:
    Type: AWS::IAM::OIDCProvider
    Properties:
      Url: https://token.actions.githubusercontent.com
      ClientIdList: [ sts.amazonaws.com ]
      ThumbprintList: [ !Ref OidcThumbprint ]     # GitHub OIDC root CA

  GitHubEcrPushRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${StackNamePrefix}-gha-ecr-push'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: !Ref GitHubOidcProvider
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                token.actions.githubusercontent.com:aud: sts.amazonaws.com
              StringLike:
                token.actions.githubusercontent.com:sub:
                  - !Sub 'repo:${GitHubOrg}/${GitHubRepo}:ref:${GitHubRef}'
      Policies:
      - PolicyName: !Sub '${StackNamePrefix}-ecr-push'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            # 1) ECR (login + push/pull to one repo)
            - Effect: Allow
              Action: ecr:GetAuthorizationToken
              Resource: '*'
            - Effect: Allow
              Action:
                - ecr:BatchCheckLayerAvailability
                - ecr:CompleteLayerUpload
                - ecr:UploadLayerPart
                - ecr:InitiateLayerUpload
                - ecr:PutImage
                - ecr:BatchGetImage
                - ecr:GetDownloadUrlForLayer
              Resource: !Sub 'arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${RepositoryName}'

            # 2) SSM SendCommand must allow the *document* resource
            - Effect: Allow
              Action: ssm:SendCommand
              Resource: !Sub arn:aws:ssm:${AWS::Region}::document/AWS-RunShellScript

            # 3) SSM SendCommand targeting the *EC2 instance* (we use --instance-ids)
            - Effect: Allow
              Action: ssm:SendCommand
              Resource: !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*
              Condition:
                StringEquals:
                  ec2:ResourceTag/Name: !Sub '${StackNamePrefix}-manager'

            # 4) (Optional but handy) Read back command output / list invocations
            #    These APIs are effectively global; safest is Resource:"*"
            - Effect: Allow
              Action:
                - ssm:GetCommandInvocation
                - ssm:ListCommandInvocations
                - ssm:ListCommands
              Resource: "*"

            # 5) (Optional for debugging) SSM inventory lookup must be "*"
            - Effect: Allow
              Action: ssm:DescribeInstanceInformation
              Resource: "*"

            # 6) Needed to resolve the manager EC2 by tags
            - Effect: Allow
              Action: ec2:DescribeInstances
              Resource: "*"

Outputs:
  GitHubEcrPushRoleArn:
    Value: !GetAtt GitHubEcrPushRole.Arn